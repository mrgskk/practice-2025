from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
import asyncio
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp

bot = Bot(
    token="7406482300:AAHKtgL8of2e8yIAryRxt-K-LS0Zdk_n0xM",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

FOOTBALL_API_TOKEN = '0386d167ecbe4253aed0854a77463271'

LEAGUES = {
    "–ò—Å–ø–∞–Ω—Å–∫–∞—è –õ–∞ –õ–∏–≥–∞": 2014,   # La Liga
    "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä –õ–∏–≥–∞": 2021,  # Premier League
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –°–µ—Ä–∏—è –ê": 2019,  # Serie A
    "–ù–µ–º–µ—Ü–∫–∞—è –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞": 2002,  # Bundesliga
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –õ–∏–≥–∞ 1": 2015  # Ligue 1
}

class FootballStates(StatesGroup):
    choosing_league = State()
    choosing_club = State()

# –ö–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
PLAYERS_PER_PAGE = 10

# CallbackData –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
class SquadPageCallback(CallbackData, prefix="squad"):
    page: int

def main_menu():
    items = list(LEAGUES.keys())
    builder = ReplyKeyboardBuilder()
    [builder.button(text=item) for item in items]
    builder.adjust(3,2,1)

    return builder.as_markup(resize_keyboard=True)

back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")

def clubs_menu(clubs: list):
    items = clubs
    builder = ReplyKeyboardBuilder()
    [builder.button(text=item) for item in items]
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(5,5,5,5,1)

    return builder.as_markup(resize_keyboard=True)

def get_squad_keyboard(page: int, max_page: int) -> InlineKeyboardMarkup:
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=SquadPageCallback(page=page - 1).pack()))
    if page < max_page - 1:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=SquadPageCallback(page=page + 1).pack()))
    if buttons:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons],row_width=2)
    return keyboard

async def format_squad_page(squad: list, page: int) -> str:
    start = page * PLAYERS_PER_PAGE
    end = start + PLAYERS_PER_PAGE
    players = squad[start:end]
    lines = []
    for p in players:
        name = p.get('name', '‚Äî')
        position = p.get('position', '‚Äî')
        number = p.get('shirtNumber', '‚Äî')
        lines.append(f"{name} - {position} - {number}")
    return "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

async def fetch_json(url):
    headers = {"X-Auth-Token": FOOTBALL_API_TOKEN}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()  # –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫.\n\n'
        '–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n'
        '- –§—É—Ç–±–æ–ª—å–Ω—ã—Ö –ª–∏–≥–∞—Ö\n'
        '- –ö–ª—É–±–∞—Ö\n'
        '- –ò–≥—Ä–æ–∫–∞—Ö\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!',
        reply_markup=main_menu()
    )
    await state.set_state(FootballStates.choosing_league)

@dp.message(F.text.in_(list(LEAGUES.keys())), FootballStates.choosing_league)
async def league_info(message: Message, state: FSMContext):
    league_name = message.text
    league_id = LEAGUES[league_name]

    await state.update_data(selected_league_id=league_id)

    url = f"https://api.football-data.org/v4/competitions/{league_id}"
    data = await fetch_json(url)
    if not data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª–∏–≥–µ.")
        return

    current_season = data.get('currentSeason', {})
    winner = current_season.get('winner')

    if winner:
        winner_text = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–∑–æ–Ω–∞: {winner.get('name', '‚Äî')}"
    else:
        winner_text = "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω"

    text = (
        f"üèÜ <b>{data.get('name', '‚Äî')}</b>\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('area', {}).get('name', '‚Äî')}\n"
        f"–°–µ–∑–æ–Ω: {current_season.get('startDate', '‚Äî')} - {current_season.get('endDate', '‚Äî')}\n"
        f"–¢–µ–∫—É—â–∏–π —Ç—É—Ä: {current_season.get('currentMatchday', '‚Äî')}\n"
    )

    emblem_url = data.get('emblem')

    teams_url = f"https://api.football-data.org/v4/competitions/{league_id}/teams"
    teams_data = await fetch_json(teams_url)
    if not teams_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
        return

    team_names = [team['name'] for team in teams_data.get('teams', [])]

    if emblem_url:
        await message.answer_photo(
            photo=emblem_url,
            caption=text,
            parse_mode='HTML',
            reply_markup=clubs_menu(team_names)
        )
    else:
        await message.answer(
            text,
            parse_mode='HTML',
            reply_markup=clubs_menu(team_names)
        )

    await state.set_state(FootballStates.choosing_club)



@dp.message(F.text.lower() == "–Ω–∞–∑–∞–¥", FootballStates.choosing_club)
async def back_to_leagues(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—É—é –ª–∏–≥—É:", reply_markup=main_menu())
    await state.set_state(FootballStates.choosing_league)

@dp.message(F.text, FootballStates.choosing_club)
async def club_info(message: Message, state: FSMContext):
    data = await state.get_data()
    league_id = data.get('selected_league_id')

    if not league_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É.", reply_markup=main_menu())
        await state.set_state(FootballStates.choosing_league)
        return

    club_name = message.text
    teams_url = f"https://api.football-data.org/v4/competitions/{league_id}/teams"
    teams_data = await fetch_json(teams_url)
    if not teams_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
        return

    found_club = None
    for team in teams_data.get('teams', []):
        if team['name'].lower() == club_name.lower():
            found_club = team
            break

    if not found_club:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∫–ª—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    club_crest = found_club.get('crest')

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —ç–º–±–ª–µ–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    club_text = (
        f"‚öΩ <b>{found_club['name']}</b>\n"
        f"–ö—Ä–∞—Ç–∫–æ–µ –∏–º—è: <b>{found_club.get('shortName', '‚Äî')}</b>\n"
        f"–û—Å–Ω–æ–≤–∞–Ω: <b>{found_club.get('founded', '‚Äî')}</b>\n"
        f"–°—Ç–∞–¥–∏–æ–Ω: <b>{found_club.get('venue', '‚Äî')}</b>\n"
        f"–ê–¥—Ä–µ—Å: <b>{found_club.get('address', '‚Äî')}</b>\n"
        f"–í–µ–±-—Å–∞–π—Ç: <b>{found_club.get('website', '‚Äî')}</b>\n"
    )

    if club_crest:
        await message.answer_photo(photo=club_crest, caption=club_text, parse_mode='HTML')
    else:
        await message.answer(club_text, parse_mode='HTML')

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
    squad_url = f"https://api.football-data.org/v4/teams/{found_club['id']}"
    squad_data = await fetch_json(squad_url)
    squad = squad_data.get('squad', []) if squad_data else []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ—Å—Ç–∞–≤–∞
    await state.update_data(squad=squad, club_name=found_club['name'])

    await send_squad_page(message.chat.id, squad, 0, found_club['name'])


async def send_squad_page(chat_id: int, squad: list, page: int, club_name: str, edit_message=None):
    PLAYERS_PER_PAGE = 10
    start = page * PLAYERS_PER_PAGE
    end = start + PLAYERS_PER_PAGE
    players = squad[start:end]

    lines = []
    for p in players:
        name = p.get('name', '‚Äî')
        position = p.get('position', '‚Äî')
        number = p.get('shirtNumber')
        if number is None:
            number_str = ""
        else:
            number_str = str(number)
        line = f"{name} - {position}" + (f" - {number_str}" if number_str else "")
        lines.append(line)

    text = f"<b>–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã {club_name} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):</b>\n" + "\n".join(lines)

    max_page = (len(squad) + PLAYERS_PER_PAGE - 1) // PLAYERS_PER_PAGE

    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"squad_{page - 1}"))
    if page < max_page - 1:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"squad_{page + 1}"))
    if buttons:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons], row_width=2)

    if edit_message:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await edit_message.edit_text(text, parse_mode='HTML', reply_markup=keyboard)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=keyboard)


@dp.callback_query(lambda c: c.data and c.data.startswith("squad_"))
async def squad_page_callback_handler(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[1])
    data = await state.get_data()
    squad = data.get('squad', [])
    club_name = data.get('club_name', '–ö–æ–º–∞–Ω–¥–∞')

    max_page = (len(squad) + 10 - 1) // 10
    if page < 0 or page >= max_page:
        await callback.answer("–ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
        return

    await send_squad_page(callback.message.chat.id, squad, page, club_name, edit_message=callback.message)
    await callback.answer()


async def start_bot():
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        print("end")